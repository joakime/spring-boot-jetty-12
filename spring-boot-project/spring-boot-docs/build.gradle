plugins {
	id 'org.asciidoctor.jvm.convert' version '2.3.0'
	id 'org.asciidoctor.jvm.pdf' version '2.3.0'
	id 'java-base'
}

repositories {
	maven {
		url "https://repo.spring.io/release"
		content {
			includeGroup "io.spring.docresources"
		}
	}
}

configurations {
	docResources
	testSlices
}

dependencies {
	docResources 'io.spring.docresources:spring-doc-resources:0.1.3.RELEASE'
	testSlices project(path: ':spring-boot-project:spring-boot-test-autoconfigure', configuration: 'testSliceMetadata')
}

task javadoc(type: Javadoc) {
	project.rootProject.gradle.projectsEvaluated {
		Set<Project> publishedProjects = rootProject.subprojects.findAll { subproject ->
			subproject != project && subproject.plugins.hasPlugin(JavaPlugin) && subproject.plugins.hasPlugin(MavenPublishPlugin)
		}
		dependsOn publishedProjects.javadoc
		source publishedProjects.javadoc.source
		classpath = project.files(publishedProjects.javadoc.classpath)
		destinationDir = project.file "$buildDir/docs/javadoc"
		options {
			author = true
			docTitle = "Spring Boot ${project.version} API"
			encoding = 'UTF-8'
			memberLevel = 'protected'
			outputLevel = 'quiet'
			splitIndex = true
			stylesheetFile = file('src/main/javadoc/spring-javadoc.css')
			use = true
			windowTitle = "Spring Boot ${project.version} API"
		}
	}
}

task dependencyVersions(type: org.springframework.boot.build.constraints.ExtractVersionConstraints) {
	enforcedPlatform(':spring-boot-project:spring-boot-dependencies')
}

task extractDocResources(type: Sync) {
	from {
		configurations.docResources.collect { zipTree(it) }
	}
	into "$buildDir/docs/resources"
}

task copyDocResourcesJs(type: Sync) {
	destinationDir = file("$buildDir/docs")
	from (extractDocResources) {
		include 'js/**'
		into "asciidoc"
	}
	from (extractDocResources) {
		include 'js/**'
		into "asciidocMultipage"
	}
}

asciidoctorj {
	// fatalWarnings '.*'
}

tasks.withType(org.asciidoctor.gradle.jvm.AbstractAsciidoctorTask) {
	dependsOn dependencyVersions
	baseDirFollowsSourceDir()
	doFirst {
		def versionConstraints = dependencyVersions.versionConstraints
		attributes	'jetty-version': versionConstraints['org.eclipse.jetty:jetty-server'],
					'jooq-version': versionConstraints['org.jooq:jooq'],
					'spring-amqp-version': versionConstraints['org.springframework.amqp:spring-amqp'],
					'spring-boot-version': project.version,
					'spring-data-commons-version': versionConstraints['org.springframework.data:spring-data-commons'],
					'spring-data-couchbase-version': versionConstraints['org.springframework.data:spring-data-couchbase'],
					'spring-data-jdbc-version': versionConstraints['org.springframework.data:spring-data-jdbc'],
					'spring-data-jpa-version': versionConstraints['org.springframework.data:spring-data-jpa'],
					'spring-data-mongodb-version': versionConstraints['org.springframework.data:spring-data-mongodb'],
					'spring-data-neo4j-version': versionConstraints['org.springframework.data:spring-data-neo4j'],
					'spring-data-rest-version': versionConstraints['org.springframework.data:spring-data-rest-core'],
					'spring-data-solr-version': versionConstraints['org.springframework.data:spring-data-solr'],
					'spring-framework-version': versionConstraints['org.springframework:spring-core'],
					'spring-integration-version': versionConstraints['org.springframework.integration:spring-integration-core'],
					'spring-security-version': versionConstraints['org.springframework.security:spring-security-core'],
					'spring-webservices-version': versionConstraints['org.springframework.ws:spring-ws-core']
	}
	attributes	'asciidoc-sources-root': file('src/docs/asciidoc'),
				'attribute-missing': 'warn',
				'sources-root': file('src')
	if (!(it instanceof org.asciidoctor.gradle.jvm.AsciidoctorPdfTask)) {
		dependsOn copyDocResourcesJs
		options 'doctype': 'book'
		attributes	'highlightjsdir': 'js/highlight',
					'highlightjs-theme': 'github',
					'linkcss': true,
					'icons': 'font',
					'stylesdir': 'css/',
					'docinfodir': "$buildDir/docs/resources",
					'stylesheet': "$buildDir/docs/resources/css/spring.css"
	}
}

asciidoctor {
	sources {
		include '*.htmlsingleadoc'
	}
}

asciidoctorPdf {
	sources {
		include '*.pdfadoc'
	}
}

task asciidoctorMultipage(type: org.asciidoctor.gradle.jvm.AsciidoctorTask) {
	sourceDir file('src/docs/asciidoc')
	sources {
		include '*.htmladoc'
		include '*.adoc'
	}
}

task zip(type: Zip) {
	dependsOn asciidoctor, asciidoctorMultipage, asciidoctorPdf
	duplicatesStrategy 'fail'
	from(asciidoctor.outputDir) {
		into 'reference/htmlsingle'
	}
	from(asciidoctorPdf.outputDir) {
		into 'reference/pdf'
	}
	from(asciidoctorMultipage.outputDir) {
		into 'reference/html'
	}
	from(javadoc) {
		into 'api'
	}
}

task documentTestSlices(type: org.springframework.boot.build.test.autoconfigure.DocumentTestSlices) {
	testSlices = configurations.testSlices
	outputFile = file("$buildDir/docs/generated/test-slices.adoc")
}

task documentStarters(type: org.springframework.boot.build.starters.DocumentStarters) {
	outputDir = file("$buildDir/docs/generated/starters/");
}
